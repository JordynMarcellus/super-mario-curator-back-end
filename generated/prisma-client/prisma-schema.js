module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCourse {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorld {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Course {
  courseUUID: ID!
  courseId: String!
  isDeleted: Boolean!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  courseUUID: ID
  courseId: String!
  isDeleted: Boolean!
  description: String
}

input CourseCreateManyInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  courseUUID_ASC
  courseUUID_DESC
  courseId_ASC
  courseId_DESC
  isDeleted_ASC
  isDeleted_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePreviousValues {
  courseUUID: ID!
  courseId: String!
  isDeleted: Boolean!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CourseScalarWhereInput {
  courseUUID: ID
  courseUUID_not: ID
  courseUUID_in: [ID!]
  courseUUID_not_in: [ID!]
  courseUUID_lt: ID
  courseUUID_lte: ID
  courseUUID_gt: ID
  courseUUID_gte: ID
  courseUUID_contains: ID
  courseUUID_not_contains: ID
  courseUUID_starts_with: ID
  courseUUID_not_starts_with: ID
  courseUUID_ends_with: ID
  courseUUID_not_ends_with: ID
  courseId: String
  courseId_not: String
  courseId_in: [String!]
  courseId_not_in: [String!]
  courseId_lt: String
  courseId_lte: String
  courseId_gt: String
  courseId_gte: String
  courseId_contains: String
  courseId_not_contains: String
  courseId_starts_with: String
  courseId_not_starts_with: String
  courseId_ends_with: String
  courseId_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateDataInput {
  courseId: String
  isDeleted: Boolean
  description: String
}

input CourseUpdateInput {
  courseId: String
  isDeleted: Boolean
  description: String
}

input CourseUpdateManyDataInput {
  courseId: String
  isDeleted: Boolean
  description: String
}

input CourseUpdateManyInput {
  create: [CourseCreateInput!]
  update: [CourseUpdateWithWhereUniqueNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueNestedInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyMutationInput {
  courseId: String
  isDeleted: Boolean
  description: String
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateDataInput!
}

input CourseUpsertWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseWhereInput {
  courseUUID: ID
  courseUUID_not: ID
  courseUUID_in: [ID!]
  courseUUID_not_in: [ID!]
  courseUUID_lt: ID
  courseUUID_lte: ID
  courseUUID_gt: ID
  courseUUID_gte: ID
  courseUUID_contains: ID
  courseUUID_not_contains: ID
  courseUUID_starts_with: ID
  courseUUID_not_starts_with: ID
  courseUUID_ends_with: ID
  courseUUID_not_ends_with: ID
  courseId: String
  courseId_not: String
  courseId_in: [String!]
  courseId_not_in: [String!]
  courseId_lt: String
  courseId_lte: String
  courseId_gt: String
  courseId_gte: String
  courseId_contains: String
  courseId_not_contains: String
  courseId_starts_with: String
  courseId_not_starts_with: String
  courseId_ends_with: String
  courseId_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  courseUUID: ID
}

scalar DateTime

scalar Long

type Mutation {
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorld(data: WorldCreateInput!): World!
  updateWorld(data: WorldUpdateInput!, where: WorldWhereUniqueInput!): World
  upsertWorld(where: WorldWhereUniqueInput!, create: WorldCreateInput!, update: WorldUpdateInput!): World!
  deleteWorld(where: WorldWhereUniqueInput!): World
  deleteManyWorlds(where: WorldWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  ITEM_CREATE
  ITEM_UPDATE
  ITEM_DELETE
  PERMISSION_UPDATE
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  world(where: WorldWhereUniqueInput!): World
  worlds(where: WorldWhereInput, orderBy: WorldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [World]!
  worldsConnection(where: WorldWhereInput, orderBy: WorldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorldConnection!
  node(id: ID!): Node
}

type Subscription {
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  world(where: WorldSubscriptionWhereInput): WorldSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  makerId: String
  resetToken: String
  restTokenExpiry: Float
  permissions: [Permission!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  makerId: String
  resetToken: String
  restTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  makerId_ASC
  makerId_DESC
  resetToken_ASC
  resetToken_DESC
  restTokenExpiry_ASC
  restTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  makerId: String
  resetToken: String
  restTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  makerId: String
  resetToken: String
  restTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  makerId: String
  resetToken: String
  restTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  makerId: String
  makerId_not: String
  makerId_in: [String!]
  makerId_not_in: [String!]
  makerId_lt: String
  makerId_lte: String
  makerId_gt: String
  makerId_gte: String
  makerId_contains: String
  makerId_not_contains: String
  makerId_starts_with: String
  makerId_not_starts_with: String
  makerId_ends_with: String
  makerId_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  restTokenExpiry: Float
  restTokenExpiry_not: Float
  restTokenExpiry_in: [Float!]
  restTokenExpiry_not_in: [Float!]
  restTokenExpiry_lt: Float
  restTokenExpiry_lte: Float
  restTokenExpiry_gt: Float
  restTokenExpiry_gte: Float
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type World {
  worldUUID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

type WorldConnection {
  pageInfo: PageInfo!
  edges: [WorldEdge]!
  aggregate: AggregateWorld!
}

input WorldCreateInput {
  worldUUID: ID
  courses: CourseCreateManyInput
}

type WorldEdge {
  node: World!
  cursor: String!
}

enum WorldOrderByInput {
  worldUUID_ASC
  worldUUID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorldPreviousValues {
  worldUUID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorldSubscriptionPayload {
  mutation: MutationType!
  node: World
  updatedFields: [String!]
  previousValues: WorldPreviousValues
}

input WorldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorldWhereInput
  AND: [WorldSubscriptionWhereInput!]
  OR: [WorldSubscriptionWhereInput!]
  NOT: [WorldSubscriptionWhereInput!]
}

input WorldUpdateInput {
  courses: CourseUpdateManyInput
}

input WorldWhereInput {
  worldUUID: ID
  worldUUID_not: ID
  worldUUID_in: [ID!]
  worldUUID_not_in: [ID!]
  worldUUID_lt: ID
  worldUUID_lte: ID
  worldUUID_gt: ID
  worldUUID_gte: ID
  worldUUID_contains: ID
  worldUUID_not_contains: ID
  worldUUID_starts_with: ID
  worldUUID_not_starts_with: ID
  worldUUID_ends_with: ID
  worldUUID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  AND: [WorldWhereInput!]
  OR: [WorldWhereInput!]
  NOT: [WorldWhereInput!]
}

input WorldWhereUniqueInput {
  worldUUID: ID
}
`
      }
    